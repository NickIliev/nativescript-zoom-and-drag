"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var utils = require("utils/utils");
var ItemsComponent = (function () {
    function ItemsComponent() {
        this.states = ["unknown", "start", "change", "end"];
        this.startScale = 1;
    }
    ItemsComponent.prototype.ngOnInit = function () {
        this.item = this.angularItem.nativeElement;
        this.statusLbl = this.status.nativeElement;
        this.density = utils.layout.getDisplayDensity();
        this.item.translateX = 0;
        this.item.translateY = 0;
        this.item.scaleX = 1;
        this.item.scaleY = 1;
        this.updateStatus();
    };
    ItemsComponent.prototype.onPan = function (args) {
        console.log("PAN[" + this.states[args.state] + "] deltaX: " + Math.round(args.deltaX) + " deltaY: " + Math.round(args.deltaY));
        if (args.state === 1) {
            this.prevDeltaX = 0;
            this.prevDeltaY = 0;
        }
        else if (args.state === 2) {
            this.item.translateX += args.deltaX - this.prevDeltaX;
            this.item.translateY += args.deltaY - this.prevDeltaY;
            this.prevDeltaX = args.deltaX;
            this.prevDeltaY = args.deltaY;
        }
        this.updateStatus();
    };
    ItemsComponent.prototype.onPinch = function (args) {
        console.log("PINCH[" + this.states[args.state] + "] scale: " + args.scale + " focusX: " + args.getFocusX() + " focusY: " + args.getFocusY());
        if (args.state === 1) {
            var newOriginX = args.getFocusX() - this.item.translateX;
            var newOriginY = args.getFocusY() - this.item.translateY;
            var oldOriginX = this.item.originX * this.item.getMeasuredWidth();
            var oldOriginY = this.item.originY * this.item.getMeasuredHeight();
            this.item.translateX += (oldOriginX - newOriginX) * (1 - this.item.scaleX);
            this.item.translateY += (oldOriginY - newOriginY) * (1 - this.item.scaleY);
            this.item.originX = newOriginX / this.item.getMeasuredWidth();
            this.item.originY = newOriginY / this.item.getMeasuredHeight();
            this.startScale = this.item.scaleX;
        }
        else if (args.scale && args.scale !== 1) {
            var newScale = this.startScale * args.scale;
            newScale = Math.min(8, newScale);
            newScale = Math.max(0.125, newScale);
            this.item.scaleX = newScale;
            this.item.scaleY = newScale;
        }
    };
    ItemsComponent.prototype.onDoubleTap = function (args) {
        var _this = this;
        console.log("DOUBLETAP");
        this.item.animate({
            translate: { x: 0, y: 0 },
            scale: { x: 1, y: 1 },
            curve: "easeOut",
            duration: 300
        }).then(function () {
            _this.updateStatus();
        });
        this.updateStatus();
    };
    ItemsComponent.prototype.updateStatus = function () {
        var text = "translate: [" + Math.round(this.item.translateX) + ", " + Math.round(this.item.translateY) + "]" +
            "\nscale: [" + (Math.round(this.item.scaleX * 100) / 100) + ", " + (Math.round(this.item.scaleY * 100) / 100) + "]" +
            "\norigin: [" + Math.round(this.item.originX * this.item.getMeasuredWidth()) + ", " + Math.round(this.item.originY * this.item.getMeasuredHeight()) + "]";
        this.statusLbl.text = text;
    };
    __decorate([
        core_1.ViewChild("item"),
        __metadata("design:type", core_1.ElementRef)
    ], ItemsComponent.prototype, "angularItem", void 0);
    __decorate([
        core_1.ViewChild("status"),
        __metadata("design:type", core_1.ElementRef)
    ], ItemsComponent.prototype, "status", void 0);
    ItemsComponent = __decorate([
        core_1.Component({
            selector: "ns-items",
            moduleId: module.id,
            templateUrl: "./items.component.html",
        }),
        __metadata("design:paramtypes", [])
    ], ItemsComponent);
    return ItemsComponent;
}());
exports.ItemsComponent = ItemsComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlbXMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaXRlbXMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQWlFO0FBTWpFLG1DQUFxQztBQVNyQztJQWFJO1FBTkEsV0FBTSxHQUFHLENBQUMsU0FBUyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFJL0MsZUFBVSxHQUFHLENBQUMsQ0FBQztJQUVDLENBQUM7SUFFakIsaUNBQVEsR0FBUjtRQUNJLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUM7UUFDM0MsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQztRQUUzQyxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUVoRCxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUM7UUFDekIsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUNyQixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFFckIsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUFFRCw4QkFBSyxHQUFMLFVBQU0sSUFBeUI7UUFDM0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsWUFBWSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBRS9ILEVB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QUcsR0FBRyxDQUFDLEdBQUcsR0FBRztZQUNuSCxhQUFhLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUMsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUMsR0FBRyxHQUFHLENBQUM7UUFFOUosSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBQy9CLENBQUM7SUE3RmtCO1FBQWxCLGdCQUFTLENBQUMsTUFBTSxDQUFDO2tDQUFjLGlCQUFVO3VEQUFDO0lBR3RCO1FBQXBCLGdCQUFTLENBQUMsUUFBUSxDQUFDO2tDQUFTLGlCQUFVO2tEQUFDO0lBSi9CLGNBQWM7UUFMMUIsZ0JBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxVQUFVO1lBQ3BCLFFBQVEsRUFBRSxNQUFNLENBQUMsRUFBRTtZQUNuQixXQUFXLEVBQUUsd0JBQXdCO1NBQ3hDLENBQUM7O09BQ1csY0FBYyxDQStGMUI7SUFBRCxxQkFBQztDQUFBLEFBL0ZELElBK0ZDO0FBL0ZZLHdDQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBWaWV3Q2hpbGQsIEVsZW1lbnRSZWYgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgRXZlbnREYXRhIH0gZnJvbSAnZGF0YS9vYnNlcnZhYmxlJztcbmltcG9ydCB7IFBhZ2UgfSBmcm9tICd1aS9wYWdlJztcbmltcG9ydCB7IExhYmVsIH0gZnJvbSBcInVpL2xhYmVsXCI7XG5pbXBvcnQgeyBWaWV3IH0gZnJvbSBcInVpL2NvcmUvdmlld1wiO1xuXG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tIFwidXRpbHMvdXRpbHNcIjtcbmltcG9ydCB7IEdlc3R1cmVFdmVudERhdGEsIFBpbmNoR2VzdHVyZUV2ZW50RGF0YSwgUGFuR2VzdHVyZUV2ZW50RGF0YSB9IGZyb20gXCJ1aS9nZXN0dXJlc1wiO1xuXG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiBcIm5zLWl0ZW1zXCIsXG4gICAgbW9kdWxlSWQ6IG1vZHVsZS5pZCxcbiAgICB0ZW1wbGF0ZVVybDogXCIuL2l0ZW1zLmNvbXBvbmVudC5odG1sXCIsXG59KVxuZXhwb3J0IGNsYXNzIEl0ZW1zQ29tcG9uZW50IHtcbiAgICBAVmlld0NoaWxkKFwiaXRlbVwiKSBhbmd1bGFySXRlbTogRWxlbWVudFJlZjtcbiAgICBpdGVtOiBWaWV3O1xuXG4gICAgQFZpZXdDaGlsZChcInN0YXR1c1wiKSBzdGF0dXM6IEVsZW1lbnRSZWY7XG4gICAgc3RhdHVzTGJsOiBMYWJlbDtcblxuICAgIHN0YXRlcyA9IFtcInVua25vd25cIiwgXCJzdGFydFwiLCBcImNoYW5nZVwiLCBcImVuZFwiXTtcbiAgICBkZW5zaXR5OiBudW1iZXI7XG4gICAgcHJldkRlbHRhWDogbnVtYmVyO1xuICAgIHByZXZEZWx0YVk6IG51bWJlcjtcbiAgICBzdGFydFNjYWxlID0gMTtcblxuICAgIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5pdGVtID0gdGhpcy5hbmd1bGFySXRlbS5uYXRpdmVFbGVtZW50O1xuICAgICAgICB0aGlzLnN0YXR1c0xibCA9IHRoaXMuc3RhdHVzLm5hdGl2ZUVsZW1lbnQ7XG5cbiAgICAgICAgdGhpcy5kZW5zaXR5ID0gdXRpbHMubGF5b3V0LmdldERpc3BsYXlEZW5zaXR5KCk7XG5cbiAgICAgICAgdGhpcy5pdGVtLnRyYW5zbGF0ZVggPSAwO1xuICAgICAgICB0aGlzLml0ZW0udHJhbnNsYXRlWSA9IDA7XG4gICAgICAgIHRoaXMuaXRlbS5zY2FsZVggPSAxO1xuICAgICAgICB0aGlzLml0ZW0uc2NhbGVZID0gMTtcblxuICAgICAgICB0aGlzLnVwZGF0ZVN0YXR1cygpO1xuICAgIH1cblxuICAgIG9uUGFuKGFyZ3M6IFBhbkdlc3R1cmVFdmVudERhdGEpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJQQU5bXCIgKyB0aGlzLnN0YXRlc1thcmdzLnN0YXRlXSArIFwiXSBkZWx0YVg6IFwiICsgTWF0aC5yb3VuZChhcmdzLmRlbHRhWCkgKyBcIiBkZWx0YVk6IFwiICsgTWF0aC5yb3VuZChhcmdzLmRlbHRhWSkpO1xuXG4gICAgICAgIGlmIChhcmdzLnN0YXRlID09PSAxKSB7XG4gICAgICAgICAgICB0aGlzLnByZXZEZWx0YVggPSAwO1xuICAgICAgICAgICAgdGhpcy5wcmV2RGVsdGFZID0gMDtcbiAgICAgICAgfSBlbHNlIGlmIChhcmdzLnN0YXRlID09PSAyKSB7XG4gICAgICAgICAgICB0aGlzLml0ZW0udHJhbnNsYXRlWCArPSBhcmdzLmRlbHRhWCAtIHRoaXMucHJldkRlbHRhWDtcbiAgICAgICAgICAgIHRoaXMuaXRlbS50cmFuc2xhdGVZICs9IGFyZ3MuZGVsdGFZIC0gdGhpcy5wcmV2RGVsdGFZO1xuXG4gICAgICAgICAgICB0aGlzLnByZXZEZWx0YVggPSBhcmdzLmRlbHRhWDtcbiAgICAgICAgICAgIHRoaXMucHJldkRlbHRhWSA9IGFyZ3MuZGVsdGFZO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy51cGRhdGVTdGF0dXMoKTtcbiAgICB9XG5cbiAgICBvblBpbmNoKGFyZ3M6IFBpbmNoR2VzdHVyZUV2ZW50RGF0YSkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIlBJTkNIW1wiICsgdGhpcy5zdGF0ZXNbYXJncy5zdGF0ZV0gKyBcIl0gc2NhbGU6IFwiICsgYXJncy5zY2FsZSArIFwiIGZvY3VzWDogXCIgKyBhcmdzLmdldEZvY3VzWCgpICsgXCIgZm9jdXNZOiBcIiArIGFyZ3MuZ2V0Rm9jdXNZKCkpO1xuXG4gICAgICAgIGlmIChhcmdzLnN0YXRlID09PSAxKSB7XG4gICAgICAgICAgICBjb25zdCBuZXdPcmlnaW5YID0gYXJncy5nZXRGb2N1c1goKSAtIHRoaXMuaXRlbS50cmFuc2xhdGVYO1xuICAgICAgICAgICAgY29uc3QgbmV3T3JpZ2luWSA9IGFyZ3MuZ2V0Rm9jdXNZKCkgLSB0aGlzLml0ZW0udHJhbnNsYXRlWTtcblxuICAgICAgICAgICAgY29uc3Qgb2xkT3JpZ2luWCA9IHRoaXMuaXRlbS5vcmlnaW5YICogdGhpcy5pdGVtLmdldE1lYXN1cmVkV2lkdGgoKTtcbiAgICAgICAgICAgIGNvbnN0IG9sZE9yaWdpblkgPSB0aGlzLml0ZW0ub3JpZ2luWSAqIHRoaXMuaXRlbS5nZXRNZWFzdXJlZEhlaWdodCgpO1xuXG4gICAgICAgICAgICB0aGlzLml0ZW0udHJhbnNsYXRlWCArPSAob2xkT3JpZ2luWCAtIG5ld09yaWdpblgpICogKDEgLSB0aGlzLml0ZW0uc2NhbGVYKTtcbiAgICAgICAgICAgIHRoaXMuaXRlbS50cmFuc2xhdGVZICs9IChvbGRPcmlnaW5ZIC0gbmV3T3JpZ2luWSkgKiAoMSAtIHRoaXMuaXRlbS5zY2FsZVkpO1xuXG4gICAgICAgICAgICB0aGlzLml0ZW0ub3JpZ2luWCA9IG5ld09yaWdpblggLyB0aGlzLml0ZW0uZ2V0TWVhc3VyZWRXaWR0aCgpO1xuICAgICAgICAgICAgdGhpcy5pdGVtLm9yaWdpblkgPSBuZXdPcmlnaW5ZIC8gdGhpcy5pdGVtLmdldE1lYXN1cmVkSGVpZ2h0KCk7XG5cbiAgICAgICAgICAgIHRoaXMuc3RhcnRTY2FsZSA9IHRoaXMuaXRlbS5zY2FsZVg7XG4gICAgICAgIH0gZWxzZSBpZiAoYXJncy5zY2FsZSAmJiBhcmdzLnNjYWxlICE9PSAxKSB7XG4gICAgICAgICAgICBsZXQgbmV3U2NhbGUgPSB0aGlzLnN0YXJ0U2NhbGUgKiBhcmdzLnNjYWxlO1xuICAgICAgICAgICAgbmV3U2NhbGUgPSBNYXRoLm1pbig4LCBuZXdTY2FsZSk7XG4gICAgICAgICAgICBuZXdTY2FsZSA9IE1hdGgubWF4KDAuMTI1LCBuZXdTY2FsZSk7XG5cbiAgICAgICAgICAgIHRoaXMuaXRlbS5zY2FsZVggPSBuZXdTY2FsZTtcbiAgICAgICAgICAgIHRoaXMuaXRlbS5zY2FsZVkgPSBuZXdTY2FsZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uRG91YmxlVGFwKGFyZ3M6IEdlc3R1cmVFdmVudERhdGEpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJET1VCTEVUQVBcIik7XG5cbiAgICAgICAgdGhpcy5pdGVtLmFuaW1hdGUoe1xuICAgICAgICAgICAgdHJhbnNsYXRlOiB7IHg6IDAsIHk6IDAgfSxcbiAgICAgICAgICAgIHNjYWxlOiB7IHg6IDEsIHk6IDEgfSxcbiAgICAgICAgICAgIGN1cnZlOiBcImVhc2VPdXRcIixcbiAgICAgICAgICAgIGR1cmF0aW9uOiAzMDBcbiAgICAgICAgfSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVN0YXR1cygpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnVwZGF0ZVN0YXR1cygpO1xuICAgIH1cblxuICAgIHVwZGF0ZVN0YXR1cygpIHtcbiAgICAgICAgY29uc3QgdGV4dCA9IFwidHJhbnNsYXRlOiBbXCIgKyBNYXRoLnJvdW5kKHRoaXMuaXRlbS50cmFuc2xhdGVYKSArIFwiLCBcIiArIE1hdGgucm91bmQodGhpcy5pdGVtLnRyYW5zbGF0ZVkpICsgXCJdXCIgK1xuICAgICAgICAgICAgXCJcXG5zY2FsZTogW1wiICsgKE1hdGgucm91bmQodGhpcy5pdGVtLnNjYWxlWCAqIDEwMCkgLyAxMDApICsgXCIsIFwiICsgKE1hdGgucm91bmQodGhpcy5pdGVtLnNjYWxlWSAqIDEwMCkgLyAxMDApICsgXCJdXCIgK1xuICAgICAgICAgICAgXCJcXG5vcmlnaW46IFtcIiArIE1hdGgucm91bmQodGhpcy5pdGVtLm9yaWdpblggKiB0aGlzLml0ZW0uZ2V0TWVhc3VyZWRXaWR0aCgpKSArIFwiLCBcIiArIE1hdGgucm91bmQodGhpcy5pdGVtLm9yaWdpblkgKiB0aGlzLml0ZW0uZ2V0TWVhc3VyZWRIZWlnaHQoKSkgKyBcIl1cIjtcblxuICAgICAgICB0aGlzLnN0YXR1c0xibC50ZXh0ID0gdGV4dDtcbiAgICB9XG59Il19