"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var utils = require("utils/utils");
var ItemsComponent = (function () {
    function ItemsComponent() {
        this.states = ["unknown", "start", "change", "end"];
        this.startScale = 1;
    }
    ItemsComponent.prototype.ngOnInit = function () {
        this.item = this.angularItem.nativeElement;
        this.statusLbl = this.status.nativeElement;
        this.density = utils.layout.getDisplayDensity();
        this.item.translateX = 0;
        this.item.translateY = 0;
        this.item.scaleX = 1;
        this.item.scaleY = 1;
        this.updateStatus();
    };
    ItemsComponent.prototype.onPan = function (args) {
        console.log("PAN[" + this.states[args.state] + "] deltaX: " + Math.round(args.deltaX) + " deltaY: " + Math.round(args.deltaY));
        console.log("PAN state: " + this.states[args.state] + " ; PAN args.state: " + args.state);
        if (args.state === 1) {
            this.prevDeltaX = 0;
            this.prevDeltaY = 0;
        }
        else if (args.state === 2) {
            this.item.translateX += args.deltaX - this.prevDeltaX;
            this.item.translateY += args.deltaY - this.prevDeltaY;
            this.prevDeltaX = args.deltaX;
            this.prevDeltaY = args.deltaY;
        }
        this.updateStatus();
    };
    ItemsComponent.prototype.onPinch = function (args) {
        console.log("PINCH[" + this.states[args.state] + "] scale: " + args.scale + " focusX: " + args.getFocusX() + " focusY: " + args.getFocusY());
        if (args.state === 1) {
            var newOriginX = args.getFocusX() - this.item.translateX;
            var newOriginY = args.getFocusY() - this.item.translateY;
            var oldOriginX = this.item.originX * this.item.getMeasuredWidth();
            var oldOriginY = this.item.originY * this.item.getMeasuredHeight();
            this.item.translateX += (oldOriginX - newOriginX) * (1 - this.item.scaleX);
            this.item.translateY += (oldOriginY - newOriginY) * (1 - this.item.scaleY);
            this.item.originX = newOriginX / this.item.getMeasuredWidth();
            this.item.originY = newOriginY / this.item.getMeasuredHeight();
            this.startScale = this.item.scaleX;
        }
        else if (args.scale && args.scale !== 1) {
            var newScale = this.startScale * args.scale;
            newScale = Math.min(8, newScale);
            newScale = Math.max(0.125, newScale);
            this.item.scaleX = newScale;
            this.item.scaleY = newScale;
        }
    };
    ItemsComponent.prototype.onDoubleTap = function (args) {
        var _this = this;
        console.log("DOUBLETAP");
        this.item.animate({
            translate: { x: 0, y: 0 },
            scale: { x: 1, y: 1 },
            curve: "easeOut",
            duration: 300
        }).then(function () {
            _this.updateStatus();
        });
        this.updateStatus();
    };
    ItemsComponent.prototype.updateStatus = function () {
        var text = "translate: [" + Math.round(this.item.translateX) + ", " + Math.round(this.item.translateY) + "]" +
            "\nscale: [" + (Math.round(this.item.scaleX * 100) / 100) + ", " + (Math.round(this.item.scaleY * 100) / 100) + "]" +
            "\norigin: [" + Math.round(this.item.originX * this.item.getMeasuredWidth()) + ", " + Math.round(this.item.originY * this.item.getMeasuredHeight()) + "]";
        this.statusLbl.text = text;
    };
    __decorate([
        core_1.ViewChild("item"),
        __metadata("design:type", core_1.ElementRef)
    ], ItemsComponent.prototype, "angularItem", void 0);
    __decorate([
        core_1.ViewChild("status"),
        __metadata("design:type", core_1.ElementRef)
    ], ItemsComponent.prototype, "status", void 0);
    ItemsComponent = __decorate([
        core_1.Component({
            selector: "ns-items",
            moduleId: module.id,
            templateUrl: "./items.component.html",
        }),
        __metadata("design:paramtypes", [])
    ], ItemsComponent);
    return ItemsComponent;
}());
exports.ItemsComponent = ItemsComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlbXMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaXRlbXMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQWlFO0FBTWpFLG1DQUFxQztBQVNyQztJQWFJO1FBTkEsV0FBTSxHQUFHLENBQUMsU0FBUyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFJL0MsZUFBVSxHQUFHLENBQUMsQ0FBQztJQUVDLENBQUM7SUFFakIsaUNBQVEsR0FBUjtRQUNJLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUM7UUFDM0MsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQztRQUUzQyxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUVoRCxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUM7UUFDekIsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUNyQixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFFckIsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUFFRCw4QkFBSyxHQUFMLFVBQU0sSUFBeUI7UUFDM0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsWUFBWSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBRS9ILE9B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LE1BQU0sR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUc7WUFDbkgsYUFBYSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBRTlKLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUMvQixDQUFDO0lBL0ZrQjtRQUFsQixnQkFBUyxDQUFDLE1BQU0sQ0FBQztrQ0FBYyxpQkFBVTt1REFBQztJQUd0QjtRQUFwQixnQkFBUyxDQUFDLFFBQVEsQ0FBQztrQ0FBUyxpQkFBVTtrREFBQztJQUovQixjQUFjO1FBTDFCLGdCQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsVUFBVTtZQUNwQixRQUFRLEVBQUUsTUFBTSxDQUFDLEVBQUU7WUFDbkIsV0FBVyxFQUFFLHdCQUF3QjtTQUN4QyxDQUFDOztPQUNXLGNBQWMsQ0FpRzFCO0lBQUQscUJBQUM7Q0FBQSxBQWpHRCxJQWlHQztBQWpHWSx3Q0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgVmlld0NoaWxkLCBFbGVtZW50UmVmIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgRXZlbnREYXRhIH0gZnJvbSAnZGF0YS9vYnNlcnZhYmxlJztcclxuaW1wb3J0IHsgUGFnZSB9IGZyb20gJ3VpL3BhZ2UnO1xyXG5pbXBvcnQgeyBMYWJlbCB9IGZyb20gXCJ1aS9sYWJlbFwiO1xyXG5pbXBvcnQgeyBWaWV3IH0gZnJvbSBcInVpL2NvcmUvdmlld1wiO1xyXG5cclxuaW1wb3J0ICogYXMgdXRpbHMgZnJvbSBcInV0aWxzL3V0aWxzXCI7XHJcbmltcG9ydCB7IEdlc3R1cmVFdmVudERhdGEsIFBpbmNoR2VzdHVyZUV2ZW50RGF0YSwgUGFuR2VzdHVyZUV2ZW50RGF0YSB9IGZyb20gXCJ1aS9nZXN0dXJlc1wiO1xyXG5cclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6IFwibnMtaXRlbXNcIixcclxuICAgIG1vZHVsZUlkOiBtb2R1bGUuaWQsXHJcbiAgICB0ZW1wbGF0ZVVybDogXCIuL2l0ZW1zLmNvbXBvbmVudC5odG1sXCIsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJdGVtc0NvbXBvbmVudCB7XHJcbiAgICBAVmlld0NoaWxkKFwiaXRlbVwiKSBhbmd1bGFySXRlbTogRWxlbWVudFJlZjtcclxuICAgIGl0ZW06IFZpZXc7XHJcblxyXG4gICAgQFZpZXdDaGlsZChcInN0YXR1c1wiKSBzdGF0dXM6IEVsZW1lbnRSZWY7XHJcbiAgICBzdGF0dXNMYmw6IExhYmVsO1xyXG5cclxuICAgIHN0YXRlcyA9IFtcInVua25vd25cIiwgXCJzdGFydFwiLCBcImNoYW5nZVwiLCBcImVuZFwiXTtcclxuICAgIGRlbnNpdHk6IG51bWJlcjtcclxuICAgIHByZXZEZWx0YVg6IG51bWJlcjtcclxuICAgIHByZXZEZWx0YVk6IG51bWJlcjtcclxuICAgIHN0YXJ0U2NhbGUgPSAxO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkgeyB9XHJcblxyXG4gICAgbmdPbkluaXQoKSB7XHJcbiAgICAgICAgdGhpcy5pdGVtID0gdGhpcy5hbmd1bGFySXRlbS5uYXRpdmVFbGVtZW50O1xyXG4gICAgICAgIHRoaXMuc3RhdHVzTGJsID0gdGhpcy5zdGF0dXMubmF0aXZlRWxlbWVudDtcclxuXHJcbiAgICAgICAgdGhpcy5kZW5zaXR5ID0gdXRpbHMubGF5b3V0LmdldERpc3BsYXlEZW5zaXR5KCk7XHJcblxyXG4gICAgICAgIHRoaXMuaXRlbS50cmFuc2xhdGVYID0gMDtcclxuICAgICAgICB0aGlzLml0ZW0udHJhbnNsYXRlWSA9IDA7XHJcbiAgICAgICAgdGhpcy5pdGVtLnNjYWxlWCA9IDE7XHJcbiAgICAgICAgdGhpcy5pdGVtLnNjYWxlWSA9IDE7XHJcblxyXG4gICAgICAgIHRoaXMudXBkYXRlU3RhdHVzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgb25QYW4oYXJnczogUGFuR2VzdHVyZUV2ZW50RGF0YSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiUEFOW1wiICsgdGhpcy5zdGF0ZXNbYXJncy5zdGF0ZV0gKyBcIl0gZGVsdGFYOiBcIiArIE1hdGgucm91bmQoYXJncy5kZWx0YVgpICsgXCIgZGVsdGFZOiBcIiArIE1hdGgucm91bmQoYXJncy5kZWx0YVkpKTtcclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coXCJQQU4gc3RhdGU6IFwiICsgdGhpcy5zdGF0ZXNbYXJncy5zdGF0ZV0gKyBcIiA7IFBBTiBhcmdzLnN0YXRlOiBcIiArIGFyZ3Muc3RhdGUpO1xyXG5cclxuICAgICAgICBpZiAoYXJncy5zdGF0ZSA9PT0gMSkge1xyXG4gICAgICAgICAgICB0aGlzLnByZXZEZWx0YVggPSAwO1xyXG4gICAgICAgICAgICB0aGlzLnByZXZEZWx0YVkgPSAwO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoYXJncy5zdGF0ZSA9PT0gMikge1xyXG4gICAgICAgICAgICB0aGlzLml0ZW0udHJhbnNsYXRlWCArPSBhcmdzLmRlbHRhWCAtIHRoaXMucHJldkRlbHRhWDtcclxuICAgICAgICAgICAgdGhpcy5pdGVtLnRyYW5zbGF0ZVkgKz0gYXJncy5kZWx0YVkgLSB0aGlzLnByZXZEZWx0YVk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnByZXZEZWx0YVggPSBhcmdzLmRlbHRhWDtcclxuICAgICAgICAgICAgdGhpcy5wcmV2RGVsdGFZID0gYXJncy5kZWx0YVk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnVwZGF0ZVN0YXR1cygpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uUGluY2goYXJnczogUGluY2hHZXN0dXJlRXZlbnREYXRhKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJQSU5DSFtcIiArIHRoaXMuc3RhdGVzW2FyZ3Muc3RhdGVdICsgXCJdIHNjYWxlOiBcIiArIGFyZ3Muc2NhbGUgKyBcIiBmb2N1c1g6IFwiICsgYXJncy5nZXRGb2N1c1goKSArIFwiIGZvY3VzWTogXCIgKyBhcmdzLmdldEZvY3VzWSgpKTtcclxuXHJcbiAgICAgICAgaWYgKGFyZ3Muc3RhdGUgPT09IDEpIHtcclxuICAgICAgICAgICAgY29uc3QgbmV3T3JpZ2luWCA9IGFyZ3MuZ2V0Rm9jdXNYKCkgLSB0aGlzLml0ZW0udHJhbnNsYXRlWDtcclxuICAgICAgICAgICAgY29uc3QgbmV3T3JpZ2luWSA9IGFyZ3MuZ2V0Rm9jdXNZKCkgLSB0aGlzLml0ZW0udHJhbnNsYXRlWTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG9sZE9yaWdpblggPSB0aGlzLml0ZW0ub3JpZ2luWCAqIHRoaXMuaXRlbS5nZXRNZWFzdXJlZFdpZHRoKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IG9sZE9yaWdpblkgPSB0aGlzLml0ZW0ub3JpZ2luWSAqIHRoaXMuaXRlbS5nZXRNZWFzdXJlZEhlaWdodCgpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5pdGVtLnRyYW5zbGF0ZVggKz0gKG9sZE9yaWdpblggLSBuZXdPcmlnaW5YKSAqICgxIC0gdGhpcy5pdGVtLnNjYWxlWCk7XHJcbiAgICAgICAgICAgIHRoaXMuaXRlbS50cmFuc2xhdGVZICs9IChvbGRPcmlnaW5ZIC0gbmV3T3JpZ2luWSkgKiAoMSAtIHRoaXMuaXRlbS5zY2FsZVkpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5pdGVtLm9yaWdpblggPSBuZXdPcmlnaW5YIC8gdGhpcy5pdGVtLmdldE1lYXN1cmVkV2lkdGgoKTtcclxuICAgICAgICAgICAgdGhpcy5pdGVtLm9yaWdpblkgPSBuZXdPcmlnaW5ZIC8gdGhpcy5pdGVtLmdldE1lYXN1cmVkSGVpZ2h0KCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnN0YXJ0U2NhbGUgPSB0aGlzLml0ZW0uc2NhbGVYO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoYXJncy5zY2FsZSAmJiBhcmdzLnNjYWxlICE9PSAxKSB7XHJcbiAgICAgICAgICAgIGxldCBuZXdTY2FsZSA9IHRoaXMuc3RhcnRTY2FsZSAqIGFyZ3Muc2NhbGU7XHJcbiAgICAgICAgICAgIG5ld1NjYWxlID0gTWF0aC5taW4oOCwgbmV3U2NhbGUpO1xyXG4gICAgICAgICAgICBuZXdTY2FsZSA9IE1hdGgubWF4KDAuMTI1LCBuZXdTY2FsZSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLml0ZW0uc2NhbGVYID0gbmV3U2NhbGU7XHJcbiAgICAgICAgICAgIHRoaXMuaXRlbS5zY2FsZVkgPSBuZXdTY2FsZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb25Eb3VibGVUYXAoYXJnczogR2VzdHVyZUV2ZW50RGF0YSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiRE9VQkxFVEFQXCIpO1xyXG5cclxuICAgICAgICB0aGlzLml0ZW0uYW5pbWF0ZSh7XHJcbiAgICAgICAgICAgIHRyYW5zbGF0ZTogeyB4OiAwLCB5OiAwIH0sXHJcbiAgICAgICAgICAgIHNjYWxlOiB7IHg6IDEsIHk6IDEgfSxcclxuICAgICAgICAgICAgY3VydmU6IFwiZWFzZU91dFwiLFxyXG4gICAgICAgICAgICBkdXJhdGlvbjogMzAwXHJcbiAgICAgICAgfSkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlU3RhdHVzKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMudXBkYXRlU3RhdHVzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlU3RhdHVzKCkge1xyXG4gICAgICAgIGNvbnN0IHRleHQgPSBcInRyYW5zbGF0ZTogW1wiICsgTWF0aC5yb3VuZCh0aGlzLml0ZW0udHJhbnNsYXRlWCkgKyBcIiwgXCIgKyBNYXRoLnJvdW5kKHRoaXMuaXRlbS50cmFuc2xhdGVZKSArIFwiXVwiICtcclxuICAgICAgICAgICAgXCJcXG5zY2FsZTogW1wiICsgKE1hdGgucm91bmQodGhpcy5pdGVtLnNjYWxlWCAqIDEwMCkgLyAxMDApICsgXCIsIFwiICsgKE1hdGgucm91bmQodGhpcy5pdGVtLnNjYWxlWSAqIDEwMCkgLyAxMDApICsgXCJdXCIgK1xyXG4gICAgICAgICAgICBcIlxcbm9yaWdpbjogW1wiICsgTWF0aC5yb3VuZCh0aGlzLml0ZW0ub3JpZ2luWCAqIHRoaXMuaXRlbS5nZXRNZWFzdXJlZFdpZHRoKCkpICsgXCIsIFwiICsgTWF0aC5yb3VuZCh0aGlzLml0ZW0ub3JpZ2luWSAqIHRoaXMuaXRlbS5nZXRNZWFzdXJlZEhlaWdodCgpKSArIFwiXVwiO1xyXG5cclxuICAgICAgICB0aGlzLnN0YXR1c0xibC50ZXh0ID0gdGV4dDtcclxuICAgIH1cclxufSJdfQ==